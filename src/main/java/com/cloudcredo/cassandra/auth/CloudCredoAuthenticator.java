package com.cloudcredo.cassandra.auth;

import org.apache.cassandra.auth.AuthenticatedUser;
import org.apache.cassandra.auth.IAuthenticator;
import org.apache.cassandra.config.ConfigurationException;
import org.apache.cassandra.thrift.AuthenticationException;

import java.util.Map;

/**
 * A CloudFoundry specific Authenticator.
 * <p/>
 * This is designed to work with the CloudCredo vcap_cassandra Cloudfoundry support. Each provisioned instance of Cassandra
 * will have a unique password and username generated by vcap_cassandra and set in the System environment in order for
 * this component to read and apply to the Cassandra authorization process.
 */
public class CloudCredoAuthenticator implements IAuthenticator {

    /**
     * The Cassandra username for the provisioned service instance.
     */
    private String cf_username;

    /**
     * The Cassandra password for the provisioned service instance
     */
    private String cf_password;

    /**
     * Assigns the cf_username and cf_password fields with the values taken from the System
     * environment variables CF_USER and CF_PASSWORD. These values are created set by vcap_cassandra ruby project
     * on provision of a new Cassandra service.
     */
    public CloudCredoAuthenticator() {
        cf_username = System.getenv("CF_USER");
        cf_password = System.getenv("CF_PASSWORD");
    }

    /**
     * @return null as the Cassandra services does not recognize a default service.
     *         TODO Can we return something that isn't null here?
     */
    public AuthenticatedUser defaultUser() {
        return null;
    }

    /**
     * @param credentials. A Map containing the Cassandra managed username and password to authorize against.
     * @return a valid AuthenticatedUser injected with the cf_username if authentication was successful.
     * @throws AuthenticationException if the cf_username and cf_password could not be validated against credentials.
     */
    public AuthenticatedUser authenticate(Map<? extends CharSequence, ? extends CharSequence> credentials) throws AuthenticationException {
        CharSequence username = credentials.get(USERNAME_KEY);
        if (username == null)
            throw new AuthenticationException("Authentication request was missing the required key '" + USERNAME_KEY + "'");

        CharSequence password = credentials.get(PASSWORD_KEY);
        if (password == null)
            throw new AuthenticationException("Authentication request was missing the required key '" + PASSWORD_KEY + "'");

        boolean authenticated = username.equals(cf_username) && password.equals(cf_password);

        if (!authenticated) throw new AuthenticationException(
                String.format("User could not be validated : %s", username));

        return new AuthenticatedUser(username.toString());
    }

    /**
     * Ensures that the required fields have been set correctly.
     *
     * @throws ConfigurationException if cf_username or cf_password have not been set correctly. If this is the case
     *                                the error would probably lie with vcap_cassandra.
     */
    public void validateConfiguration() throws ConfigurationException {
        if (cf_username == null || cf_username.length() == 0)
            throw new ConfigurationException("CF_USER is null or empty");

        if (cf_password == null || cf_password.length() == 0)
            throw new ConfigurationException("CF_PASSWORD is null or empty");
    }
}

